#!/bin/sh

__get_os_name_from_uname_a() {
    if command -v uname > /dev/null ; then
        unset V
        V=$(uname -a | cut -d ' ' -f2)
        case $V in
            opensuse*) return 1 ;;
            *-*) echo "$V" | cut -d- -f1 ;;
            *)   return 1
        esac
    else
        return 1
    fi
}

__get_os_version_from_uname_a() {
    if command -v uname > /dev/null ; then
        unset V
        V=$(uname -a | cut -d ' ' -f2)
        case $V in
            opensuse*) return 1 ;;
            *-*) echo "$V" | cut -d- -f2 ;;
            *)   return 1
        esac
    else
        return 1
    fi
}

# https://www.freedesktop.org/software/systemd/man/os-release.html
__get_os_name_from_etc_os_release() {
    if [ -f /etc/os-release ] ; then
        unset F
        F=$(mktemp) &&
        cat /etc/os-release > "$F" &&
        echo 'echo "$ID"'  >> "$F" &&
        sh "$F"
    else
        return 1
    fi
}

__get_os_version_from_etc_os_release() {
    if [ -f /etc/os-release ] ; then
        unset F
        F=$(mktemp) &&
        cat /etc/os-release > "$F" &&
        echo 'echo "$VERSION_ID"'  >> "$F" && {
            unset V
            V=$(sh "$F")
            if [ -z "$V" ] ; then
                echo 'rolling'
            else
                echo "$V"
            fi
        }
    else
        return 1
    fi
}

# https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/lsbrelease.html
__get_os_name_from_lsb_release() {
    if command -v lsb_release > /dev/null ; then
        lsb_release --id | cut -f2
    else
        return 1
    fi
}

__get_os_version_from_lsb_release() {
    if command -v lsb_release > /dev/null ; then
        lsb_release --release | cut -f2
    else
        return 1
    fi
}

__get_os_name_from_getprop() {
    if command -v getprop > /dev/null && command -v app_process > /dev/null ; then
        echo 'android'
    else
        return 1
    fi
}

__get_os_version_from_getprop() {
    if command -v getprop > /dev/null ; then
        getprop ro.build.version.release
    else
        return 1
    fi
}

__get_os_arch_from_getprop() {
    if command -v getprop > /dev/null ; then
        getprop ro.product.cpu.abi
    else
        return 1
    fi
}

__get_os_arch_from_uname() {
    if command -v uname > /dev/null ; then
        uname -m 2> /dev/null
    else
        return 1
    fi
}

__get_os_arch_from_arch() {
    if command -v arch > /dev/null ; then
        arch
    else
        return 1
    fi
}

__get_os_type_from_uname() {
    case $1 in
        msys*)    echo "windows" ;;
        mingw32*) echo "windows" ;;
        mingw64*) echo "windows" ;;
        cygwin*)  echo 'windows' ;;
        *)        echo "$1" 
    esac
}

__get_os_name_from_os_type() {
    case $1 in
        freebsd) echo 'FreeBSD' ;;
        openbsd) echo 'OpenBSD' ;;
        netbsd)  echo 'NetBSD'  ;;
        darwin)  sw_vers -productName ;;
        linux)
            if [ "$(uname -o)" = Android ] ; then
                echo Android
            else
                __get_os_name_from_uname_a ||
                __get_os_name_from_etc_os_release ||
                __get_os_name_from_lsb_release
            fi
            ;;
        windows)
            systeminfo | grep 'OS Name:' | cut -d: -f2 | head -n 1 | sed 's/^[[:space:]]*//'
            ;;
        *) echo "$1" 
    esac
}

__get_os_version_from_os_type() {
    case $1 in
        freebsd) freebsd-version ;;
        openbsd) uname -r ;;
        netbsd)  uname -r ;;
        darwin)  sw_vers -productVersion ;;
        linux)
            __get_os_version_from_uname_a ||
            __get_os_version_from_etc_os_release ||
            __get_os_version_from_lsb_release ||
            __get_os_version_from_getprop
            ;;
        windows)
            systeminfo | grep 'OS Version:' | cut -d: -f2 | head -n 1 | sed 's/^[[:space:]]*//' | cut -d ' ' -f1
            ;;
    esac
}

__get_os_sub_system() {
    case $(uname | tr A-Z a-z) in
        msys*)    echo "msys"    ;;
        mingw32*) echo "mingw32" ;;
        mingw64*) echo "mingw64" ;;
        cygwin*)  echo 'cygwin'  ;;
        *)
            if [ "$(uname -o)" = 'Android' ] ; then
                if [ -n "$TERMUX_VERSION" ] ; then
                    echo termux
                fi
            fi
    esac
}

__get_os_arch() {
    __get_os_arch_from_uname ||
    __get_os_arch_from_arch
}

__get_os_libc_from_os_type() {
    case $1 in
        linux)
            if [ "$(uname -o)" = Android ] ; then
                echo bionic
                return 0
            fi
            # https://pubs.opengroup.org/onlinepubs/7908799/xcu/getconf.html
            if command -v getconf > /dev/null ; then
                if getconf GNU_LIBC_VERSION > /dev/null 2>&1 ; then
                    echo glibc
                    return 0
                fi
            fi
            if command -v ldd > /dev/null ; then
                if ldd --version 2>&1 | head -n 1 | grep -q GLIBC ; then
                    echo glibc
                    return 0
                fi
                if ldd --version 2>&1 | head -n 1 | grep -q musl ; then
                    echo musl
                    return 0
                fi
            fi
            return 1
    esac
}

os() {
    if [ $# -eq 0 ] ; then
        printf "current-machine-os-type : %s\n" "$(os type)"
        printf "current-machine-os-name : %s\n" "$(os name)"
        printf "current-machine-os-vers : %s\n" "$(os vers)"
        printf "current-machine-os-subs : %s\n" "$(os subs)"
        printf "current-machine-os-arch : %s\n" "$(os arch)"
        printf "current-machine-os-libc : %s\n" "$(os libc)"
    elif [ $# -eq 1 ] ; then
        case $1 in
            -h|--help)
                cat <<'EOF'
os -h | --help
os -V | --version
os type
os name
os vers
os subs
os arch
os libc
EOF
                ;;
            -V|--version)
                printf "%s\n" '2021.09.19.22'
                ;;
            type)
                __get_os_type_from_uname $(uname | tr A-Z a-z)
                ;;
            name)
                __get_os_name_from_os_type $(os type)
                ;;
            vers)
                __get_os_version_from_os_type $(os type)
                ;;
            subs)
                __get_os_sub_system
                ;;
            arch)
                __get_os_arch
                ;;
            libc)
                __get_os_libc_from_os_type $(os type)
                ;;
            *)  echo "unrecognized argument: $1" >&2; return 1
        esac
    else
        echo "os command only support one argument." >&2; return 1
    fi
}

os $@
