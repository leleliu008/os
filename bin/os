#!/bin/sh

# Copyright (c) 2020-2022 刘富频
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# a command-line tool to get current os info.

# dependent commands: uname tr cut cat sed grep

set -e

__get_os_kind() {
    if [ $# -eq 0 ] ; then
        __get_os_kind "$(uname | tr A-Z a-z)"
    else
        case $1 in
            msys*)    printf '%s\n' 'windows' ;;
            mingw32*) printf '%s\n' 'windows' ;;
            mingw64*) printf '%s\n' 'windows' ;;
            cygwin*)  printf '%s\n' 'windows' ;;
            linux)
                if [ "$(uname -o 2>/dev/null)" = Android ] ; then
                    printf '%s\n' android
                else
                    printf '%s\n' linux
                fi
                ;;
            *)  printf '%s\n' "$1"
        esac
    fi
}

################################################################################

__get_os_type() {
    if [ $# -eq 0 ] ; then
        __get_os_type "$(__get_os_kind)"
    else
        case $1 in
            darwin)  printf '%s\n' macos ;;
            *)       printf '%s\n' "$1"
        esac
    fi
}

################################################################################

__get_os_id_from_etc_redhat_release() {
    if [ $# -eq 0 ] ; then
        if [ -e /etc/redhat-release ] ; then
            __get_os_id_from_etc_redhat_release "$(cat /etc/redhat-release)"
        else
            return 1
        fi
    else
        case $1 in
            'Red Hat Enterprise Linux release'*)
                printf '%s\n' rhel
                ;;
            'Fedora release'*)
                printf '%s\n' fedora
                ;;
            'CentOS release'*)
                printf '%s\n' centos
                ;;
            'CentOS Linux release'*)
                printf '%s\n' centos
                ;;
            *)  printf '%s\n' "$1" | cut -d ' ' -f1 | tr A-Z a-z
        esac
    fi
}

# https://www.freedesktop.org/software/systemd/man/os-release.html
__get_os_id_from_etc_os_release() {
    if [ -e /etc/os-release ] ; then
        (
            . /etc/os-release || return 20
            if [ -z "$ID" ] ; then
                return 1
            else
                printf '%s\n' "$ID" | tr A-Z a-z
            fi
        )
    else
        return 1
    fi
}

# https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/lsbrelease.html
__get_os_id_from_lsb_release() {
    if command -v lsb_release > /dev/null ; then
        lsb_release --id | cut -f2 | tr A-Z a-z
    else
        return 1
    fi
}

__get_os_id_from_uname_a() {
    if [ $# -eq 0 ] ; then
        if command -v uname > /dev/null ; then
            __get_os_id_from_uname_a "$(uname -a | cut -d ' ' -f2)"
        else
            return 1
        fi
    else
        case $1 in
            opensuse*) return 1 ;;
            *-*) printf '%s\n' "$1" | cut -d- -f1 | tr A-Z a-z ;;
            *)   return 1
        esac
    fi
}

__get_os_id() {
    if [ $# -eq 0 ] ; then
        __get_os_id "$(__get_os_type)"
    else
        case $1 in
            linux)
                __get_os_id_from_etc_redhat_release ||
                __get_os_id_from_etc_os_release ||
                __get_os_id_from_lsb_release ||
                __get_os_id_from_uname_a
                ;;
            *) printf '%s\n' "$1"
        esac
    fi
}

################################################################################

__get_os_name() {
    if [ $# -eq 0 ] ; then
        __get_os_name "$(__get_os_id)"
    else
        case $1 in
            debian)  printf '%s\n' 'Debian' ;;
            ubuntu)  printf '%s\n' 'Ubuntu' ;;
            linuxmint) printf '%s\n' 'LinuxMint' ;;
            centos)  printf '%s\n' 'CentOS' ;;
            fedora)  printf '%s\n' 'Fedora' ;;
            rocky)   printf '%s\n' 'RockyLinux' ;;
            rhel)    printf '%s\n' 'RHEL' ;;
            opensuse-leap)
                    printf '%s\n' 'openSUSE-Leap' ;;
            gentoo)  printf '%s\n' 'Gentoo' ;;
            manjaro) printf '%s\n' 'Manjaro' ;;
            alpine)  printf '%s\n' 'AlpineLinux' ;;
            arch)    printf '%s\n' 'ArchLinux' ;;
            void)    printf '%s\n' 'VoidLinux' ;;
            freebsd) printf '%s\n' 'FreeBSD' ;;
            netbsd)  printf '%s\n' 'NetBSD' ;;
            openbsd) printf '%s\n' 'OpenBSD' ;;
            macos)   printf '%s\n' 'macOS' ;;
            android) printf '%s\n' 'Android' ;;
            windows)
                systeminfo | sed -n '/OS Name:/p' | cut -d: -f2 | head -n 1 | sed 's/^[[:space:]]*//'
                ;;
            *) printf '%s\n' "$1"
        esac
    fi
}

################################################################################

__get_os_version_from_etc_redhat_release() {
    if [ $# -eq 0 ] ; then
        if [ -e /etc/redhat-release ] ; then
            __get_os_version_from_etc_redhat_release $(cat /etc/redhat-release)
        else
            return 1
        fi
    else
        while [ -n "$1" ]
        do
            case $1 in
                [1-9]*) printf '%s\n' "$1"; return 0
            esac
            shift
        done
        return 1
    fi
}

__get_os_version_from_etc_os_release() {
    if [ -e /etc/os-release ] ; then
        (
            . /etc/os-release || return 20
            if [ -z "$VERSION_ID" ] ; then
                printf '%s\n' 'rolling'
            else
                printf '%s\n' "$VERSION_ID"
            fi
        )
    else
        return 1
    fi
}

__get_os_version_from_lsb_release() {
    if command -v lsb_release > /dev/null ; then
        lsb_release --release | cut -f2
    else
        return 1
    fi
}

__get_os_version_from_getprop() {
    if command -v getprop > /dev/null ; then
        getprop ro.build.version.release
    else
        return 1
    fi
}

__get_os_version_from_uname_a() {
    if [ $# -eq 0 ] ; then
        if command -v uname > /dev/null ; then
            __get_os_version_from_uname_a "$(uname -a | cut -d ' ' -f2)"
        else
            return 1
        fi
    else
        case $1 in
            opensuse*) return 1 ;;
            *-*) printf '%s\n' "$1" | cut -d- -f2 ;;
            *)   return 1
        esac
    fi
}

__get_os_version() {
    if [ $# -eq 0 ] ; then
        __get_os_version "$(__get_os_kind)"
    else
        case $1 in
            linux)
                __get_os_version_from_etc_redhat_release ||
                __get_os_version_from_etc_os_release ||
                __get_os_version_from_lsb_release ||
                __get_os_version_from_uname_a
                ;;
            android)
                __get_os_version_from_getprop
                ;;
            freebsd) freebsd-version ;;
            openbsd) uname -r ;;
            netbsd)  uname -r ;;
            darwin)  sw_vers -productVersion ;;
            windows)
                systeminfo | sed -n '/OS Version:/p' | cut -d: -f2 | head -n 1 | sed 's/^[[:space:]]*//' | cut -d ' ' -f1
                ;;
        esac
    fi
}

################################################################################

__get_os_arch_from_uname() {
    if command -v uname > /dev/null ; then
        uname -m 2> /dev/null
    else
        return 1
    fi
}

__get_os_arch_from_arch() {
    if command -v arch > /dev/null ; then
        arch
    else
        return 1
    fi
}

__get_os_arch() {
    __get_os_arch_from_uname ||
    __get_os_arch_from_arch
}

################################################################################

__get_os_libc() {
    if [ $# -eq 0 ] ; then
        __get_os_libc "$(__get_os_kind)"
    else
        case $1 in
            android)
                printf '%s\n' bionic
                ;;
            linux)
                # https://pubs.opengroup.org/onlinepubs/7908799/xcu/getconf.html
                if command -v getconf > /dev/null ; then
                    if getconf GNU_LIBC_VERSION > /dev/null 2>&1 ; then
                        printf '%s\n' glibc
                        return 0
                    fi
                fi

                ARCH="$(uname -m)"

                [ "$ARCH" = 'ppc64le' ] && ARCH='powerpc64le'

                if [ -e "/lib/ld-musl-$ARCH.so.1" ] ; then
                    printf '%s\n' musl
                    return 0
                fi

                if [ -e "/lib64/ld-linux-$(uname -m | tr _ -).so.2" ] ; then
                    printf '%s\n' glibc
                    return 0
                fi

                return 1
        esac
    fi
}

################################################################################

# https://stackoverflow.com/questions/45181115/portable-way-to-find-the-number-of-processors-cpus-in-a-shell-script
__get_os_ncpu() {
    case "$(uname)" in
        Darwin) sysctl -n machdep.cpu.thread_count ;;
        *BSD)   sysctl -n hw.ncpu ;;
        *)  if command nproc --version > /dev/null 2>&1 ; then
                command nproc
            elif test -f /proc/cpuinfo ; then
                if command -v grep > /dev/null ; then
                    grep -c processor /proc/cpuinfo
                elif command -v sed > /dev/null && command -v wc > /dev/null ; then
                    sed -n '/^processor/p' /proc/cpuinfo | wc -l
                else
                    printf '%s\n' 4
                fi
            else
                printf '%s\n' 4
            fi
    esac
}

################################################################################

__get_os_sub_system() {
    case $(uname | tr A-Z a-z) in
        msys*)    printf '%s\n' "msys"    ;;
        mingw32*) printf '%s\n' "mingw32" ;;
        mingw64*) printf '%s\n' "mingw64" ;;
        cygwin*)  printf '%s\n' 'cygwin'  ;;
        *)
            if [ "$(uname -o 2>/dev/null)" = Android ] ; then
                if [ -n "$TERMUX_VERSION" ] ; then
                    printf '%s\n' termux
                fi
            fi
    esac
}

################################################################################

os() {
    if [ $# -eq 0 ] ; then
        printf "current-machine-os-kind : %s\n" "$(os kind)"
        printf "current-machine-os-type : %s\n" "$(os type)"
        printf "current-machine-os-uuid : %s\n" "$(os uuid)"
        printf "current-machine-os-name : %s\n" "$(os name)"
        printf "current-machine-os-vers : %s\n" "$(os vers)"
        printf "current-machine-os-arch : %s\n" "$(os arch)"
        printf "current-machine-os-ncpu : %s\n" "$(os ncpu)"
        printf "current-machine-os-libc : %s\n" "$(os libc)"
        printf "current-machine-os-subs : %s\n" "$(os subs)"
    elif [ $# -eq 1 ] ; then
        case $1 in
            -h|--help)
                cat <<'EOF'
os -h | --help
os -V | --version
os kind
os type
os uuid
os name
os vers
os arch
os ncpu
os libc
os subs
EOF
                ;;
            --version)
                printf "%s\n" '2022.10.27.18'
                ;;
            kind) __get_os_kind ;;
            type) __get_os_type ;;
            uuid) __get_os_id ;;
            name) __get_os_name ;;
            vers) __get_os_version ;;
            arch) __get_os_arch ;;
            ncpu) __get_os_ncpu ;;
            libc) __get_os_libc ;;
            subs) __get_os_sub_system ;;
            *)  printf '%s\n' "unrecognized argument: $1" >&2; return 1
        esac
    else
        printf '%s\n' "too many arguments. os command only accept one argument." >&2; return 1
    fi
}

os $@
